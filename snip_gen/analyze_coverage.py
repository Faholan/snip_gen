"""Analyze the coverage of files generated by fastcov."""

import argparse
import json
import logging
import operator
import sys
import typing as t
from pathlib import Path

from snip_gen import COVERAGE_MAX, DEFAULT_COVERAGE
from snip_gen.typehints import CoverageArgs, load_coverage

if t.TYPE_CHECKING:
    from snip_gen.typehints import Coverage, LowCoverageFiles


logging.basicConfig(level=logging.INFO, format="%(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


def find_low_coverage_from_json(
    coverage_data: "Coverage", threshold: float, min_threshold: float = 0.0
) -> "LowCoverageFiles":
    """Parse a fastcov JSON coverage file to find files within a coverage range.

    Args:
        coverage_data: Raw coverage data.
        threshold (float): The upper coverage percentage threshold (0-100).
            Files with coverage < threshold are considered.
        min_threshold (float, optional) : The lower coverage percentage threshold (0-100).
            Files with coverage >= min_threshold are considered.
            Default is 0.0.

    Returns:
        A list of tuples (filename, percentage, data), sorted by percentage,
        for files where min_threshold <= coverage < threshold.
    """
    coverage_results = []

    logger.debug("Processing coverage data...")
    for source_file_name, file_info in coverage_data.items():
        lines_info = file_info.get("lines")

        if not lines_info:
            logger.warning(f"No lines information found for {source_file_name}. Skipping.")
            continue

        coverage_percentage = len([cov for cov in lines_info.values() if cov > 0]) / len(lines_info) * 100.0

        coverage_results.append((Path(source_file_name), float(coverage_percentage), file_info))

    logger.debug(f"Extracted coverage for {len(coverage_results)} files.")

    # Filter for low coverage
    low_coverage_files = [res for res in coverage_results if min_threshold <= res[1] < threshold]

    # Sort by coverage percentage (ascending)
    low_coverage_files.sort(key=operator.itemgetter(1))

    return low_coverage_files


def register(parser: argparse.ArgumentParser) -> None:
    """Register the command-line parser for coverage analysis.

    Args:
        parser: The argument parser to register the command with.
    """
    parser.add_argument(
        "--fastcov-json", default=DEFAULT_COVERAGE, nargs="?", type=Path, help="Path to the fastcov coverage.json file."
    )
    parser.add_argument(
        "--threshold",
        type=float,
        default=80.0,
        help="Upper coverage threshold percentage (0-100). Files below this threshold will be reported. Default: 80.0",
    )
    parser.add_argument(
        "--min-threshold",
        type=float,
        default=0.0,
        help=(
            "Lower coverage threshold percentage (0-100). "
            "Files at or above this threshold will be considered. Default: 0.0"
        ),
    )

    parser.set_defaults(func=main)


def validate_args(arguments: argparse.Namespace) -> CoverageArgs | None:
    """Validate the arguments.

    Args:
        arguments: The parsed command-line arguments.

    Returns:
        CoverageArgs | None: Validated arguments or None if validation fails.
    """
    args = CoverageArgs(
        threshold=arguments.threshold, min_threshold=arguments.min_threshold, fastcov_json=Path(arguments.fastcov_json)
    )

    ret_args: CoverageArgs | None = args

    if not (0.0 <= args.threshold <= COVERAGE_MAX):
        logger.error("Threshold must be between 0.0 and 100.0.")
        ret_args = None
    if not (0.0 <= args.min_threshold <= COVERAGE_MAX):
        logger.error("Min-threshold must be between 0.0 and 100.0.")
        ret_args = None
    if args.min_threshold >= args.threshold:
        logger.error("Min-threshold must be less than threshold.")
        ret_args = None

    if not args.fastcov_json.exists():
        logger.error(f"Fastcov JSON file not found: {args.fastcov_json}")
        ret_args = None

    return ret_args


def main(arguments: argparse.Namespace) -> None:
    """Analyze coverage files to find low line coverage.

    Args:
        arguments: The parsed command-line arguments.
    """
    args = validate_args(arguments)

    if args is None:
        sys.exit(1)

    try:
        coverage_data: Coverage = load_coverage(args.fastcov_json)
    except json.JSONDecodeError:
        logger.critical(f"Error decoding JSON from {args.fastcov_json}. Is it a valid JSON file?")
        sys.exit(1)

    low_coverage = find_low_coverage_from_json(coverage_data, args.threshold, args.min_threshold)

    if low_coverage:
        if args.min_threshold > 0.0:
            logger.info(
                f"\n--- Files with Line Coverage Between {args.min_threshold:.2f}% and "
                f"{args.threshold:.2f}% (from {args.fastcov_json}) ---"
            )
        else:
            logger.info(f"\n--- Files with Line Coverage Below {args.threshold:.2f}% (from {args.fastcov_json}) ---")
        for source_file, coverage, _ in low_coverage:
            logger.info(f"{coverage:.2f}% : {source_file}")
        logger.info("--------------------------------------------------------------------")
    elif args.min_threshold > 0.0:
        logger.info(
            f"\nNo files found with line coverage between {args.min_threshold:.2f}% "
            f"and {args.threshold:.2f}% in {args.fastcov_json}."
        )
    else:
        logger.info(f"\nNo files found with line coverage below {args.threshold:.2f}% in {args.fastcov_json}.")


if __name__ == "__main__":
    _parser = argparse.ArgumentParser(description="Analyze coverage files to find low line coverage.")

    register(_parser)

    main(_parser.parse_args())
